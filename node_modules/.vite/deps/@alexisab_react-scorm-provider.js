import {
  require_react
} from "./chunk-ZOIWZPCO.js";
import {
  __commonJS
} from "./chunk-DFKQJ226.js";

// node_modules/pipwerks-scorm-api-wrapper/index.js
var require_pipwerks_scorm_api_wrapper = __commonJS({
  "node_modules/pipwerks-scorm-api-wrapper/index.js"(exports) {
    (function(e, a) {
      for (var i in a)
        e[i] = a[i];
    })(
      exports,
      /******/
      function(modules) {
        var installedModules = {};
        function __webpack_require__(moduleId) {
          if (installedModules[moduleId])
            return installedModules[moduleId].exports;
          var module2 = installedModules[moduleId] = {
            /******/
            exports: {},
            /******/
            id: moduleId,
            /******/
            loaded: false
            /******/
          };
          modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
          module2.loaded = true;
          return module2.exports;
        }
        __webpack_require__.m = modules;
        __webpack_require__.c = installedModules;
        __webpack_require__.oe = function(err) {
          throw err;
        };
        __webpack_require__.p = "";
        return __webpack_require__(__webpack_require__.s = 1);
      }([
        /* 0 */
        /***/
        function(module2, exports2) {
          var pipwerks = {};
          pipwerks.UTILS = {};
          pipwerks.debug = { isActive: true };
          pipwerks.SCORM = {
            //Define the SCORM object
            version: null,
            //Store SCORM version.
            handleCompletionStatus: true,
            //Whether or not the wrapper should automatically handle the initial completion status
            handleExitMode: true,
            //Whether or not the wrapper should automatically handle the exit mode
            API: {
              handle: null,
              isFound: false
            },
            //Create API child object
            connection: { isActive: false },
            //Create connection child object
            data: {
              completionStatus: null,
              exitStatus: null
            },
            //Create data child object
            debug: {}
            //Create debug child object
          };
          pipwerks.SCORM.isAvailable = function() {
            return true;
          };
          pipwerks.SCORM.API.find = function(win) {
            var API = null, findAttempts = 0, findAttemptLimit = 500, traceMsgPrefix = "SCORM.API.find", trace = pipwerks.UTILS.trace, scorm = pipwerks.SCORM;
            while (!win.API && !win.API_1484_11 && win.parent && win.parent != win && findAttempts <= findAttemptLimit) {
              findAttempts++;
              win = win.parent;
            }
            if (scorm.version) {
              switch (scorm.version) {
                case "2004":
                  if (win.API_1484_11) {
                    API = win.API_1484_11;
                  } else {
                    trace(traceMsgPrefix + ": SCORM version 2004 was specified by user, but API_1484_11 cannot be found.");
                  }
                  break;
                case "1.2":
                  if (win.API) {
                    API = win.API;
                  } else {
                    trace(traceMsgPrefix + ": SCORM version 1.2 was specified by user, but API cannot be found.");
                  }
                  break;
              }
            } else {
              if (win.API_1484_11) {
                scorm.version = "2004";
                API = win.API_1484_11;
              } else if (win.API) {
                scorm.version = "1.2";
                API = win.API;
              }
            }
            if (API) {
              trace(traceMsgPrefix + ": API found. Version: " + scorm.version);
              trace("API: " + API);
            } else {
              trace(traceMsgPrefix + ": Error finding API. \nFind attempts: " + findAttempts + ". \nFind attempt limit: " + findAttemptLimit);
            }
            return API;
          };
          pipwerks.SCORM.API.get = function() {
            var API = null, win = window, scorm = pipwerks.SCORM, find = scorm.API.find, trace = pipwerks.UTILS.trace;
            API = find(win);
            if (!API && win.parent && win.parent != win) {
              API = find(win.parent);
            }
            if (!API && win.top && win.top.opener) {
              API = find(win.top.opener);
            }
            if (!API && win.top && win.top.opener && win.top.opener.document) {
              API = find(win.top.opener.document);
            }
            if (API) {
              scorm.API.isFound = true;
            } else {
              trace("API.get failed: Can't find the API!");
            }
            return API;
          };
          pipwerks.SCORM.API.getHandle = function() {
            var API = pipwerks.SCORM.API;
            if (!API.handle && !API.isFound) {
              API.handle = API.get();
            }
            return API.handle;
          };
          pipwerks.SCORM.connection.initialize = function() {
            var success = false, scorm = pipwerks.SCORM, completionStatus = scorm.data.completionStatus, trace = pipwerks.UTILS.trace, makeBoolean = pipwerks.UTILS.StringToBoolean, debug = scorm.debug, traceMsgPrefix = "SCORM.connection.initialize ";
            trace("connection.initialize called.");
            if (!scorm.connection.isActive) {
              var API = scorm.API.getHandle(), errorCode = 0;
              if (API) {
                switch (scorm.version) {
                  case "1.2":
                    success = makeBoolean(API.LMSInitialize(""));
                    break;
                  case "2004":
                    success = makeBoolean(API.Initialize(""));
                    break;
                }
                if (success) {
                  errorCode = debug.getCode();
                  if (errorCode !== null && errorCode === 0) {
                    scorm.connection.isActive = true;
                    if (scorm.handleCompletionStatus) {
                      completionStatus = scorm.status("get");
                      if (completionStatus) {
                        switch (completionStatus) {
                          case "not attempted":
                            scorm.status("set", "incomplete");
                            break;
                          case "unknown":
                            scorm.status("set", "incomplete");
                            break;
                        }
                        scorm.save();
                      }
                    }
                  } else {
                    success = false;
                    trace(traceMsgPrefix + "failed. \nError code: " + errorCode + " \nError info: " + debug.getInfo(errorCode));
                  }
                } else {
                  errorCode = debug.getCode();
                  if (errorCode !== null && errorCode !== 0) {
                    trace(traceMsgPrefix + "failed. \nError code: " + errorCode + " \nError info: " + debug.getInfo(errorCode));
                  } else {
                    trace(traceMsgPrefix + "failed: No response from server.");
                  }
                }
              } else {
                trace(traceMsgPrefix + "failed: API is null.");
              }
            } else {
              trace(traceMsgPrefix + "aborted: Connection already active.");
            }
            return success;
          };
          pipwerks.SCORM.connection.terminate = function() {
            var success = false, scorm = pipwerks.SCORM, exitStatus = scorm.data.exitStatus, completionStatus = scorm.data.completionStatus, trace = pipwerks.UTILS.trace, makeBoolean = pipwerks.UTILS.StringToBoolean, debug = scorm.debug, traceMsgPrefix = "SCORM.connection.terminate ";
            if (scorm.connection.isActive) {
              var API = scorm.API.getHandle(), errorCode = 0;
              if (API) {
                if (scorm.handleExitMode && !exitStatus) {
                  if (completionStatus !== "completed" && completionStatus !== "passed") {
                    switch (scorm.version) {
                      case "1.2":
                        success = scorm.set("cmi.core.exit", "suspend");
                        break;
                      case "2004":
                        success = scorm.set("cmi.exit", "suspend");
                        break;
                    }
                  } else {
                    switch (scorm.version) {
                      case "1.2":
                        success = scorm.set("cmi.core.exit", "logout");
                        break;
                      case "2004":
                        success = scorm.set("cmi.exit", "normal");
                        break;
                    }
                  }
                }
                success = scorm.save();
                if (success) {
                  switch (scorm.version) {
                    case "1.2":
                      success = makeBoolean(API.LMSFinish(""));
                      break;
                    case "2004":
                      success = makeBoolean(API.Terminate(""));
                      break;
                  }
                  if (success) {
                    scorm.connection.isActive = false;
                  } else {
                    errorCode = debug.getCode();
                    trace(traceMsgPrefix + "failed. \nError code: " + errorCode + " \nError info: " + debug.getInfo(errorCode));
                  }
                }
              } else {
                trace(traceMsgPrefix + "failed: API is null.");
              }
            } else {
              trace(traceMsgPrefix + "aborted: Connection already terminated.");
            }
            return success;
          };
          pipwerks.SCORM.data.get = function(parameter) {
            var value = null, scorm = pipwerks.SCORM, trace = pipwerks.UTILS.trace, debug = scorm.debug, traceMsgPrefix = "SCORM.data.get(" + parameter + ") ";
            if (scorm.connection.isActive) {
              var API = scorm.API.getHandle(), errorCode = 0;
              if (API) {
                switch (scorm.version) {
                  case "1.2":
                    value = API.LMSGetValue(parameter);
                    break;
                  case "2004":
                    value = API.GetValue(parameter);
                    break;
                }
                errorCode = debug.getCode();
                if (value !== "" || errorCode === 0) {
                  switch (parameter) {
                    case "cmi.core.lesson_status":
                    case "cmi.completion_status":
                      scorm.data.completionStatus = value;
                      break;
                    case "cmi.core.exit":
                    case "cmi.exit":
                      scorm.data.exitStatus = value;
                      break;
                  }
                } else {
                  trace(traceMsgPrefix + "failed. \nError code: " + errorCode + "\nError info: " + debug.getInfo(errorCode));
                }
              } else {
                trace(traceMsgPrefix + "failed: API is null.");
              }
            } else {
              trace(traceMsgPrefix + "failed: API connection is inactive.");
            }
            trace(traceMsgPrefix + " value: " + value);
            return String(value);
          };
          pipwerks.SCORM.data.set = function(parameter, value) {
            var success = false, scorm = pipwerks.SCORM, trace = pipwerks.UTILS.trace, makeBoolean = pipwerks.UTILS.StringToBoolean, debug = scorm.debug, traceMsgPrefix = "SCORM.data.set(" + parameter + ") ";
            if (scorm.connection.isActive) {
              var API = scorm.API.getHandle(), errorCode = 0;
              if (API) {
                switch (scorm.version) {
                  case "1.2":
                    success = makeBoolean(API.LMSSetValue(parameter, value));
                    break;
                  case "2004":
                    success = makeBoolean(API.SetValue(parameter, value));
                    break;
                }
                if (success) {
                  if (parameter === "cmi.core.lesson_status" || parameter === "cmi.completion_status") {
                    scorm.data.completionStatus = value;
                  }
                } else {
                  errorCode = debug.getCode();
                  trace(traceMsgPrefix + "failed. \nError code: " + errorCode + ". \nError info: " + debug.getInfo(errorCode));
                }
              } else {
                trace(traceMsgPrefix + "failed: API is null.");
              }
            } else {
              trace(traceMsgPrefix + "failed: API connection is inactive.");
            }
            return success;
          };
          pipwerks.SCORM.data.save = function() {
            var success = false, scorm = pipwerks.SCORM, trace = pipwerks.UTILS.trace, makeBoolean = pipwerks.UTILS.StringToBoolean, traceMsgPrefix = "SCORM.data.save failed";
            if (scorm.connection.isActive) {
              var API = scorm.API.getHandle();
              if (API) {
                switch (scorm.version) {
                  case "1.2":
                    success = makeBoolean(API.LMSCommit(""));
                    break;
                  case "2004":
                    success = makeBoolean(API.Commit(""));
                    break;
                }
              } else {
                trace(traceMsgPrefix + ": API is null.");
              }
            } else {
              trace(traceMsgPrefix + ": API connection is inactive.");
            }
            return success;
          };
          pipwerks.SCORM.status = function(action, status) {
            var success = false, scorm = pipwerks.SCORM, trace = pipwerks.UTILS.trace, traceMsgPrefix = "SCORM.getStatus failed", cmi = "";
            if (action !== null) {
              switch (scorm.version) {
                case "1.2":
                  cmi = "cmi.core.lesson_status";
                  break;
                case "2004":
                  cmi = "cmi.completion_status";
                  break;
              }
              switch (action) {
                case "get":
                  success = scorm.data.get(cmi);
                  break;
                case "set":
                  if (status !== null) {
                    success = scorm.data.set(cmi, status);
                  } else {
                    success = false;
                    trace(traceMsgPrefix + ": status was not specified.");
                  }
                  break;
                default:
                  success = false;
                  trace(traceMsgPrefix + ": no valid action was specified.");
              }
            } else {
              trace(traceMsgPrefix + ": action was not specified.");
            }
            return success;
          };
          pipwerks.SCORM.debug.getCode = function() {
            var scorm = pipwerks.SCORM, API = scorm.API.getHandle(), trace = pipwerks.UTILS.trace, code = 0;
            if (API) {
              switch (scorm.version) {
                case "1.2":
                  code = parseInt(API.LMSGetLastError(), 10);
                  break;
                case "2004":
                  code = parseInt(API.GetLastError(), 10);
                  break;
              }
            } else {
              trace("SCORM.debug.getCode failed: API is null.");
            }
            return code;
          };
          pipwerks.SCORM.debug.getInfo = function(errorCode) {
            var scorm = pipwerks.SCORM, API = scorm.API.getHandle(), trace = pipwerks.UTILS.trace, result = "";
            if (API) {
              switch (scorm.version) {
                case "1.2":
                  result = API.LMSGetErrorString(errorCode.toString());
                  break;
                case "2004":
                  result = API.GetErrorString(errorCode.toString());
                  break;
              }
            } else {
              trace("SCORM.debug.getInfo failed: API is null.");
            }
            return String(result);
          };
          pipwerks.SCORM.debug.getDiagnosticInfo = function(errorCode) {
            var scorm = pipwerks.SCORM, API = scorm.API.getHandle(), trace = pipwerks.UTILS.trace, result = "";
            if (API) {
              switch (scorm.version) {
                case "1.2":
                  result = API.LMSGetDiagnostic(errorCode);
                  break;
                case "2004":
                  result = API.GetDiagnostic(errorCode);
                  break;
              }
            } else {
              trace("SCORM.debug.getDiagnosticInfo failed: API is null.");
            }
            return String(result);
          };
          pipwerks.SCORM.init = pipwerks.SCORM.connection.initialize;
          pipwerks.SCORM.get = pipwerks.SCORM.data.get;
          pipwerks.SCORM.set = pipwerks.SCORM.data.set;
          pipwerks.SCORM.save = pipwerks.SCORM.data.save;
          pipwerks.SCORM.quit = pipwerks.SCORM.connection.terminate;
          pipwerks.UTILS.StringToBoolean = function(value) {
            var t = typeof value;
            switch (t) {
              case "object":
              case "string":
                return /(true|1)/i.test(value);
              case "number":
                return !!value;
              case "boolean":
                return value;
              case "undefined":
                return null;
              default:
                return false;
            }
          };
          pipwerks.UTILS.trace = function(msg) {
            if (pipwerks.debug.isActive) {
              if (window.console && window.console.log) {
                window.console.log(msg);
              } else {
              }
            }
          };
          module2.exports = pipwerks;
        },
        /* 1 */
        /***/
        function(module2, exports2, __webpack_require__) {
          module2.exports = __webpack_require__(0);
        }
        /******/
      ])
    );
  }
});

// node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  }
});

// node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "node_modules/prop-types/lib/has.js"(exports, module) {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  }
});

// node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "node_modules/prop-types/index.js"(exports, module) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// node_modules/@alexisab/react-scorm-provider/lib/ScormProvider.js
var require_ScormProvider = __commonJS({
  "node_modules/@alexisab/react-scorm-provider/lib/ScormProvider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = exports.ScoContext = void 0;
    var _react = _interopRequireWildcard(require_react());
    var _pipwerksScormApiWrapper = require_pipwerks_scorm_api_wrapper();
    var _propTypes = _interopRequireDefault(require_prop_types());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      } else {
        var newObj = {};
        if (obj != null) {
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
              var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
              if (desc.get || desc.set) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
        }
        newObj.default = obj;
        return newObj;
      }
    }
    function _typeof(obj) {
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
          ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
          }));
        }
        ownKeys.forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      }
      return target;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    function _possibleConstructorReturn(self, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      }
      return _assertThisInitialized(self);
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      if (superClass)
        _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var ScoContext = _react.default.createContext({
      apiConnected: false,
      learnerName: "",
      completionStatus: "incomplete",
      suspendData: {},
      scormVersion: "",
      getSuspendData: function getSuspendData() {
      },
      setSuspendData: function setSuspendData() {
      },
      setStatus: function setStatus() {
      },
      set: function set() {
      },
      get: function get() {
      }
    });
    exports.ScoContext = ScoContext;
    var ScormProvider = function(_Component) {
      _inherits(ScormProvider2, _Component);
      function ScormProvider2(props) {
        var _this;
        _classCallCheck(this, ScormProvider2);
        _this = _possibleConstructorReturn(this, _getPrototypeOf(ScormProvider2).call(this, props));
        _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_log", function() {
          if (_this.props.debug) {
            var _console;
            (_console = console).log.apply(_console, arguments);
          }
        });
        _this._log("ScormProvider constructor called!");
        _this.getSuspendData = _this.getSuspendData.bind(_assertThisInitialized(_assertThisInitialized(_this)));
        _this.setSuspendData = _this.setSuspendData.bind(_assertThisInitialized(_assertThisInitialized(_this)));
        _this.setStatus = _this.setStatus.bind(_assertThisInitialized(_assertThisInitialized(_this)));
        _this.createScormAPIConnection = _this.createScormAPIConnection.bind(_assertThisInitialized(_assertThisInitialized(_this)));
        _this.closeScormAPIConnection = _this.closeScormAPIConnection.bind(_assertThisInitialized(_assertThisInitialized(_this)));
        _this.set = _this.set.bind(_assertThisInitialized(_assertThisInitialized(_this)));
        _this.get = _this.get.bind(_assertThisInitialized(_assertThisInitialized(_this)));
        _this.state = {
          apiConnected: false,
          learnerName: "",
          completionStatus: "incomplete",
          suspendData: {},
          scormVersion: "",
          getSuspendData: _this.getSuspendData,
          setSuspendData: _this.setSuspendData,
          setStatus: _this.setStatus,
          set: _this.set,
          get: _this.get
        };
        return _this;
      }
      _createClass(ScormProvider2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this._log("ScormProvider componentDidMount called!");
          this.createScormAPIConnection();
          window.addEventListener("beforeunload", this.closeScormAPIConnection);
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this._log("ScormProvider componentWillUnmount called!");
          this.closeScormAPIConnection();
          window.removeEventListener("beforeunload", this.closeScormAPIConnection);
        }
      }, {
        key: "createScormAPIConnection",
        value: function createScormAPIConnection() {
          var _this2 = this;
          this._log("ScormProvider createScormAPIConnection method called!");
          if (this.state.apiConnected)
            return;
          if (this.props.version)
            _pipwerksScormApiWrapper.SCORM.version = this.props.version;
          if (typeof this.props.debug === "boolean")
            _pipwerksScormApiWrapper.debug.isActive = this.props.debug;
          var scorm = _pipwerksScormApiWrapper.SCORM.init();
          if (scorm) {
            var version = _pipwerksScormApiWrapper.SCORM.version;
            var learnerName = version === "1.2" ? _pipwerksScormApiWrapper.SCORM.get("cmi.core.student_name") : _pipwerksScormApiWrapper.SCORM.get("cmi.learner_name");
            var completionStatus = _pipwerksScormApiWrapper.SCORM.status("get");
            this.setState({
              apiConnected: true,
              learnerName,
              completionStatus,
              scormVersion: version
            }, function() {
              _this2.getSuspendData();
            });
          } else {
            this._log("ScormProvider init error: could not create the SCORM API connection");
          }
        }
      }, {
        key: "closeScormAPIConnection",
        value: function closeScormAPIConnection() {
          this._log("ScormProvider closeScormAPIConnection method called!");
          if (!this.state.apiConnected)
            return;
          this.setSuspendData();
          _pipwerksScormApiWrapper.SCORM.status("set", this.state.completionStatus);
          _pipwerksScormApiWrapper.SCORM.save();
          var success = _pipwerksScormApiWrapper.SCORM.quit();
          if (success) {
            this.setState({
              apiConnected: false,
              learnerName: "",
              completionStatus: "incomplete",
              suspendData: {},
              scormVersion: ""
            });
          } else {
            this._log("ScormProvider error: could not close the API connection");
          }
        }
      }, {
        key: "getSuspendData",
        value: function getSuspendData() {
          if (!this.state.apiConnected)
            return;
          var data = _pipwerksScormApiWrapper.SCORM.get("cmi.suspend_data");
          var suspendData = data && data.length > 0 ? JSON.parse(data) : {};
          this.setState({
            suspendData
          });
        }
      }, {
        key: "setSuspendData",
        value: function setSuspendData(key, val) {
          if (!this.state.apiConnected)
            return;
          var currentData = _objectSpread({}, this.state.suspendData) || {};
          if (key && val)
            currentData[key] = val;
          var success = _pipwerksScormApiWrapper.SCORM.set("cmi.suspend_data", JSON.stringify(currentData));
          if (success) {
            this.setState({
              suspendData: currentData
            }, function() {
              _pipwerksScormApiWrapper.SCORM.save();
            });
          } else {
            this._log("ScormProvider setStatus error: could not set the suspend data provided");
          }
        }
      }, {
        key: "setStatus",
        value: function setStatus(status) {
          if (!this.state.apiConnected)
            return;
          var validStatuses = ["passed", "completed", "failed", "incomplete", "browsed", "not attempted"];
          if (validStatuses.includes(status)) {
            var success = _pipwerksScormApiWrapper.SCORM.status("set", status);
            if (success) {
              this.setState({
                completionStatus: status
              }, function() {
                _pipwerksScormApiWrapper.SCORM.save();
              });
            } else {
              this._log("ScormProvider setStatus error: could not set the status provided");
            }
          }
        }
      }, {
        key: "set",
        value: function set(param, val) {
          if (!this.state.apiConnected)
            return;
          var success = _pipwerksScormApiWrapper.SCORM.set(param, val);
          if (success) {
            _pipwerksScormApiWrapper.SCORM.save();
          } else {
            this._log("ScormProvider set error: could not set:", param, val);
          }
        }
      }, {
        key: "get",
        value: function get(param) {
          if (!this.state.apiConnected)
            return;
          return _pipwerksScormApiWrapper.SCORM.get(param);
        }
      }, {
        key: "render",
        value: function render() {
          return _react.default.createElement(ScoContext.Provider, {
            value: this.state
          }, this.props.children);
        }
      }]);
      return ScormProvider2;
    }(_react.Component);
    ScormProvider.propTypes = {
      version: _propTypes.default.bool,
      debug: _propTypes.default.bool
    };
    ScormProvider.defaultProps = {
      debug: false
    };
    var _default = ScormProvider;
    exports.default = _default;
  }
});

// node_modules/@alexisab/react-scorm-provider/lib/withScorm.js
var require_withScorm = __commonJS({
  "node_modules/@alexisab/react-scorm-provider/lib/withScorm.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _react = _interopRequireDefault(require_react());
    var _ScormProvider = require_ScormProvider();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _extends() {
      _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    function withScorm() {
      return function(WrappedComponent) {
        var WithScorm = function WithScorm2(props) {
          return _react.default.createElement(_ScormProvider.ScoContext.Consumer, null, function(value) {
            return _react.default.createElement(WrappedComponent, _extends({}, props, {
              sco: value
            }));
          });
        };
        return WithScorm;
      };
    }
    var _default = withScorm;
    exports.default = _default;
  }
});

// node_modules/@alexisab/react-scorm-provider/lib/index.js
var require_lib = __commonJS({
  "node_modules/@alexisab/react-scorm-provider/lib/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "withScorm", {
      enumerable: true,
      get: function get() {
        return _withScorm.default;
      }
    });
    exports.default = void 0;
    var _withScorm = _interopRequireDefault(require_withScorm());
    var _ScormProvider = _interopRequireDefault(require_ScormProvider());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _default = _ScormProvider.default;
    exports.default = _default;
  }
});
export default require_lib();
/*! Bundled license information:

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)
*/
//# sourceMappingURL=@alexisab_react-scorm-provider.js.map
